{"version":3,"sources":["constant.ts","view/game/styles.tsx","components/player/styles.tsx","components/player/index.tsx","components/chat/styles.tsx","components/chat/index.tsx","components/guide/styles.tsx","components/guide/index.tsx","components/popup/styles.tsx","components/popup/index.tsx","view/game/index.tsx","view/main/styles.tsx","view/main/index.tsx","App.tsx","components/globalstyle/index.tsx","reportWebVitals.ts","index.tsx"],"names":["COLOR","Layout","styled","div","Game","Roomcode","Player","PlayerCharacterWrapper","PlayerCharacterContainer","props","isSelected","css","PlayerCharacter","img","isDead","CharacterBlank","PlayerName","Bubble","userId","roomcode","isVoting","descriptions","voteId","currentDescriber","setVoteId","useState","loading","setLoading","players","setPlayers","loadCharacters","a","axios","get","withCredentials","then","data","users","catch","e","console","error","useEffect","interval","setInterval","clearInterval","map","player","i","onClick","state","nickname","src","process","index","width","d","ii","description","Array","length","n","Chat","ChatLog","NickName","span","InputContainer","ChatInput","input","SendButton","button","isBlank","chatText","setChatText","type","placeholder","onChange","target","value","Guide","Text","RoleText","isMafia","Comment","Button","isManager","now","keyword","result","startGame","post","roomCode","vote","targetUserId","log","style","fontWeight","PopUp","KeyWord","isGuessing","onSubmit","onGuess","subject","maxLength","user","setIsManager","nowState","setNowState","game","setGame","setUsers","setResult","loadGameInfo","room","owner","lastGameResult","winner","round","subjectDescription","me","role","voted","Main","Title","Label","ButtonContainer","RoomButton","Credit","wave","keyframes","swell","WaveContainer","Wave","url","setUser","setRoomcode","setNickname","makeRoom","enterRoom","color","fontSize","App","page","setPage","GlobalStyle","createGlobalStyle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b67a061f.chunk.js","sourcesContent":["export const COLOR = {\r\n  background: \"#a7b0d7\",\r\n  light: \"#d9ddee\",\r\n  dark: \"#626d9c\",\r\n  darker: \"#4c4282\",\r\n  red: \"#cc1f1f\",\r\n  blue: \"#1f3ecc\",\r\n  gray: \"#ccc\",\r\n  darkgray: \"#777\",\r\n};\r\n","import styled from \"styled-components/macro\";\r\nimport { COLOR } from \"../../constant\";\r\n\r\nexport const Layout = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${COLOR.background};\r\n`;\r\n\r\nexport const Game = styled.div`\r\n  position: relative;\r\n  width: 90%;\r\n  height: 90%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Roomcode = styled.div`\r\n  position: absolute;\r\n  top: 1rem;\r\n  left: 1rem;\r\n  font-size: 1.8rem;\r\n  font-weight: 800;\r\n`;\r\n","import styled, { css } from \"styled-components/macro\";\r\nimport { COLOR } from \"../../constant\";\r\n\r\nexport const Layout = styled.div`\r\n  width: 70%;\r\n  height: 70%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Player = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 2rem 0 0 0;\r\n`;\r\n\r\nexport const PlayerCharacterWrapper = styled.div`\r\n  width: 70%;\r\n  height: 80%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n`;\r\n\r\ninterface PlayerCharacterProps {\r\n  index?: number;\r\n  isDead?: boolean;\r\n  isSelected?: boolean;\r\n}\r\n\r\nexport const PlayerCharacterContainer = styled.div<PlayerCharacterProps>`\r\n  width: 25%;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  background: ${(props) => (props.isSelected ? COLOR.light : \"none\")};\r\n  border: ${(props) =>\r\n    props.isSelected ? css`1px solid ${COLOR.dark}` : \"none\"};\r\n  border-radius: 2rem;\r\n`;\r\n\r\nexport const PlayerCharacter = styled.img<PlayerCharacterProps>`\r\n  width: 100%;\r\n  padding: 3rem;\r\n  filter: saturate(${(props) => (props.isDead ? \"0%\" : \"100%\")});\r\n  opacity: ${(props) => (props.isDead ? \"70%\" : \"100%\")};\r\n`;\r\n\r\nexport const CharacterBlank = styled.img<PlayerCharacterProps>`\r\n  width: 80%;\r\n  padding: 3rem;\r\n  opacity: 0.7;\r\n`;\r\n\r\nexport const PlayerName = styled.div<PlayerCharacterProps>`\r\n  margin-bottom: -3rem;\r\n  font-size: 1.6rem;\r\n  font-weight: 700;\r\n  color: ${(props) => (props.isDead ? \"#aaa\" : \"#000\")};\r\n  text-decoration: ${(props) => (props.isDead ? \"line-through\" : \"none\")};\r\n`;\r\n\r\nexport const Bubble = styled.div`\r\n  background: ${COLOR.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  margin-top: -3rem;\r\n  width: 100%;\r\n  height: 6rem;\r\n  padding-left: 1.5rem;\r\n  padding-right: 1.5rem;\r\n  border-radius: 2rem;\r\n  font-size: 1.6rem;\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as S from \"./styles\";\r\nimport axios from \"axios\";\r\n\r\ninterface playersProps {\r\n  nickname: string;\r\n  userId: string;\r\n  state: string;\r\n}\r\n\r\ninterface PlayerProps {\r\n  userId: string;\r\n  roomcode: string;\r\n  isVoting: boolean;\r\n  descriptions: { userId: string; description: string }[];\r\n  voteId: string;\r\n  currentDescriber: string;\r\n  setVoteId: (s: string) => void;\r\n}\r\n\r\nfunction Player({\r\n  userId,\r\n  roomcode,\r\n  isVoting,\r\n  descriptions,\r\n  voteId,\r\n  currentDescriber,\r\n  setVoteId,\r\n}: PlayerProps) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [players, setPlayers] = useState<playersProps[]>([]);\r\n  const loadCharacters = async () => {\r\n    axios\r\n      .get(\r\n        `https://realdragon.herokuapp.com/room?roomCode=${roomcode}&userId=${userId}`,\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      )\r\n      .then(({ data }) => {\r\n        setPlayers(data.users);\r\n        setLoading(true);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    const interval = setInterval(loadCharacters, 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <S.Layout>\r\n        <S.Player>\r\n          {loading ? (\r\n            <S.PlayerCharacterWrapper>\r\n              {players.map((player, i) => {\r\n                return (\r\n                  <>\r\n                    <S.PlayerCharacterContainer\r\n                      isSelected={voteId == player.userId && isVoting}\r\n                      onClick={() => {\r\n                        if (player.state === \"ALIVE\") setVoteId(player.userId);\r\n                      }}\r\n                      key={i}\r\n                    >\r\n                      <S.PlayerName isDead={player.state !== \"ALIVE\"}>\r\n                        {player.nickname}\r\n                      </S.PlayerName>\r\n                      <S.PlayerCharacter\r\n                        src={`${process.env.PUBLIC_URL}/assets/${i}.png`}\r\n                        index={i}\r\n                        isDead={player.state !== \"ALIVE\"}\r\n                      />\r\n                      {currentDescriber === player.userId && !isVoting && (\r\n                        <S.Bubble>\r\n                          <img\r\n                            src={`${process.env.PUBLIC_URL}/assets/texting.gif`}\r\n                            width=\"100%\"\r\n                          />\r\n                        </S.Bubble>\r\n                      )}\r\n                      {descriptions.map((d, ii) => {\r\n                        {\r\n                          return d.userId == player.userId ? (\r\n                            <S.Bubble>{d.description}</S.Bubble>\r\n                          ) : (\r\n                            <></>\r\n                          );\r\n                        }\r\n                      })}\r\n                    </S.PlayerCharacterContainer>\r\n                  </>\r\n                );\r\n              })}\r\n              {[...Array(8 - players.length)].map((n, i) => (\r\n                <S.PlayerCharacterContainer>\r\n                  <S.CharacterBlank\r\n                    src={`${process.env.PUBLIC_URL}/assets/blank.gif`}\r\n                  />\r\n                </S.PlayerCharacterContainer>\r\n              ))}\r\n            </S.PlayerCharacterWrapper>\r\n          ) : (\r\n            <>로딩중...</>\r\n          )}\r\n        </S.Player>\r\n      </S.Layout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import styled, { css } from \"styled-components/macro\";\r\nimport { COLOR } from \"../../constant\";\r\n\r\nexport const Layout = styled.div`\r\n  width: 30%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Chat = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${COLOR.darker};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  align-items: left;\r\n  padding: 1rem;\r\n  border-radius: 0 2rem 2rem 0;\r\n`;\r\n\r\nexport const ChatLog = styled.div`\r\n  font-size: 1.4rem;\r\n  font-weight: 500;\r\n  color: white;\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  padding-bottom: 0.5rem;\r\n`;\r\n\r\nexport const NickName = styled.span`\r\n  color: red;\r\n  font-weight: 700;\r\n`;\r\n\r\nexport const InputContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  background: #fff;\r\n  border-radius: 2rem 2rem 2rem 0;\r\n  padding: 1rem;\r\n  margin-top: 1rem;\r\n  :focus-within {\r\n    box-shadow: 0px 0px 5px ${COLOR.dark};\r\n  }\r\n`;\r\n\r\nexport const ChatInput = styled.input`\r\n  width: 100%;\r\n  padding: 1rem;\r\n  outline: none;\r\n  border: none;\r\n  background: none;\r\n`;\r\n\r\ninterface ButtonProps {\r\n  isBlank?: boolean;\r\n}\r\n\r\nexport const SendButton = styled.button<ButtonProps>`\r\n  width: 7rem;\r\n  outline: none;\r\n  border: none;\r\n  background: ${(props) => (props.isBlank ? COLOR.gray : COLOR.dark)};\r\n  color: ${(props) => (props.isBlank ? COLOR.darkgray : \"black\")};\r\n  font-weight: 800;\r\n  border-radius: 1.5rem;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport * as S from \"./styles\";\r\n\r\nfunction Chat() {\r\n  const [chatText, setChatText] = useState(\"\");\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setChatText(e.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <S.Layout>\r\n        <S.Chat>\r\n          <S.ChatLog>\r\n            <S.NickName>닉네임 : </S.NickName>\r\n            채팅채팅채팅채팅채팅채팅채팅채팅채팅\r\n          </S.ChatLog>\r\n          <S.ChatLog>\r\n            <S.NickName>닉네임 : </S.NickName>\r\n            채팅채팅채팅채팅채팅채팅채팅채팅채팅\r\n          </S.ChatLog>\r\n          <S.ChatLog>\r\n            <S.NickName>닉네임 : </S.NickName>\r\n            채팅채팅채팅채팅채팅채팅채팅채팅채팅\r\n          </S.ChatLog>\r\n          <S.InputContainer>\r\n            <S.ChatInput\r\n              type=\"text\"\r\n              placeholder=\"채팅을 입력하세요\"\r\n              onChange={handleChange}\r\n            />\r\n            <S.SendButton isBlank={chatText.length == 0}>전송</S.SendButton>\r\n          </S.InputContainer>\r\n        </S.Chat>\r\n      </S.Layout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import styled from \"styled-components/macro\";\r\nimport { COLOR } from \"../../constant\";\r\n\r\nexport const Layout = styled.div`\r\n  width: 70%;\r\n  height: 30%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Guide = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: ${COLOR.light};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 0 0 0 2rem;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  font-size: 4rem;\r\n  font-weight: 700;\r\n`;\r\n\r\ninterface GuideProps {\r\n  isMafia?: boolean;\r\n}\r\n\r\nexport const RoleText = styled.span<GuideProps>`\r\n  font-size: 4rem;\r\n  font-weight: 800;\r\n  color: ${(props) => (props.isMafia ? COLOR.red : COLOR.blue)};\r\n`;\r\n\r\nexport const Comment = styled.div`\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n  margin: 1rem;\r\n`;\r\n\r\ninterface ButtonProps {\r\n  isBlank?: boolean;\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  width: 20rem;\r\n  height: 5rem;\r\n  outline: none;\r\n  border: none;\r\n  background: ${(props) => (props.isBlank ? COLOR.gray : COLOR.dark)};\r\n  color: ${(props) => (props.isBlank ? COLOR.darkgray : \"black\")};\r\n  font-weight: 800;\r\n  border-radius: 3rem;\r\n  font-size: 2rem;\r\n  margin-top: 1rem;\r\n  :hover {\r\n    background: ${(props) => (props.isBlank ? COLOR.gray : COLOR.darker)};\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport * as S from \"./styles\";\r\nimport { COLOR } from \"../../constant\";\r\nimport axios from \"axios\";\r\n\r\ninterface playersProps {\r\n  nickname: string;\r\n  userId: string;\r\n  state: string;\r\n}\r\n\r\ninterface GuideProps {\r\n  userId: string;\r\n  roomcode: string;\r\n  isManager: boolean;\r\n  isMafia: boolean;\r\n  now: string;\r\n  keyword: string;\r\n  voteId: string;\r\n  setVoteId: (s: string) => void;\r\n  users: playersProps[];\r\n  result: string;\r\n}\r\n\r\nfunction Guide({\r\n  userId,\r\n  roomcode,\r\n  isManager,\r\n  now,\r\n  isMafia,\r\n  keyword,\r\n  voteId,\r\n  setVoteId,\r\n  users,\r\n  result,\r\n}: GuideProps) {\r\n  const startGame = async () => {\r\n    axios\r\n      .post(\r\n        \"https://realdragon.herokuapp.com/game/start\",\r\n        {\r\n          roomCode: roomcode,\r\n          userId: userId,\r\n        },\r\n        { withCredentials: true }\r\n      )\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n  const vote = async () => {\r\n    axios\r\n      .post(\r\n        \"https://realdragon.herokuapp.com/vote\",\r\n        {\r\n          roomCode: roomcode,\r\n          userId: userId,\r\n          targetUserId: voteId,\r\n        },\r\n        { withCredentials: true }\r\n      )\r\n      .then(() => {\r\n        console.log(voteId);\r\n        setVoteId(\"\");\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <S.Layout>\r\n        <S.Guide>\r\n          {now === \"WAITING\" ? (\r\n            <>\r\n              <S.Text>\r\n                당신은{\" \"}\r\n                <span style={{ fontWeight: 800 }}>\r\n                  {isManager ? \"방장\" : \"안방장\"}\r\n                </span>\r\n                입니다.\r\n              </S.Text>\r\n              <S.Comment>\r\n                {isManager ? (\r\n                  <S.Button onClick={startGame}>게임 시작</S.Button>\r\n                ) : (\r\n                  <>방장이 게임을 시작하기를 기다려주세요.</>\r\n                )}\r\n              </S.Comment>\r\n            </>\r\n          ) : now === \"VOTING\" ? (\r\n            <>\r\n              <S.Text>\r\n                누가 <span style={{ fontWeight: 800 }}>마피아</span>일까요?\r\n              </S.Text>\r\n              <S.Button\r\n                isBlank={voteId == \"\"}\r\n                onClick={() => {\r\n                  if (voteId != \"\") vote();\r\n                }}\r\n              >\r\n                투표 완료\r\n              </S.Button>\r\n            </>\r\n          ) : now === \"END\" ? (\r\n            <>\r\n              <S.Text>\r\n                <S.RoleText isMafia={isMafia}>\r\n                  {result == \"MAFIA\" ? \"마피아\" : \"시민\"}\r\n                </S.RoleText>\r\n                (이)가 승리했습니다.\r\n              </S.Text>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <S.Text>\r\n                당신은{\" \"}\r\n                <S.RoleText isMafia={isMafia}>\r\n                  {isMafia ? \"마피아\" : \"시민\"}\r\n                </S.RoleText>\r\n                입니다.\r\n              </S.Text>\r\n              <S.Comment>\r\n                {isMafia ? (\r\n                  \"눈치껏 제시어를 맞혀 보세요.\"\r\n                ) : (\r\n                  <>\r\n                    제시어는 <span style={{ fontWeight: 800 }}>{keyword}</span>\r\n                    입니다.\r\n                  </>\r\n                )}\r\n              </S.Comment>\r\n            </>\r\n          )}\r\n        </S.Guide>\r\n      </S.Layout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Guide;\r\n","import styled, { css } from \"styled-components/macro\";\r\nimport { COLOR } from \"../../constant\";\r\n\r\nexport const Layout = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #00000088;\r\n  border-radius: 2rem;\r\n`;\r\n\r\nexport const PopUp = styled.div`\r\n  position: relative;\r\n  width: 70rem;\r\n  height: 30rem;\r\n  background: #d9ddeeaa;\r\n  border-radius: 5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 10rem;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  text-align: center;\r\n  font-size: 3rem;\r\n  font-weight: 800;\r\n`;\r\n\r\ninterface PopUpProps {\r\n  isMapia?: boolean;\r\n}\r\n\r\nexport const KeyWord = styled.span`\r\n  font-size: 3rem;\r\n  font-weight: 800;\r\n  color: ${COLOR.blue};\r\n`;\r\n\r\nexport const Comment = styled.div`\r\n  font-size: 2rem;\r\n  font-weight: 500;\r\n  margin: 1rem;\r\n`;\r\n\r\nexport const InputContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  background: #fff;\r\n  opacity: 0.6;\r\n  border-radius: 2rem;\r\n  padding: 1rem;\r\n  margin-top: 3rem;\r\n  :focus-within {\r\n    box-shadow: 0px 0px 5px ${COLOR.dark};\r\n  }\r\n`;\r\n\r\nexport const ChatInput = styled.input`\r\n  width: 100%;\r\n  padding: 1rem;\r\n  outline: none;\r\n  border: none;\r\n  background: none;\r\n`;\r\n\r\ninterface ButtonProps {\r\n  isBlank?: boolean;\r\n}\r\n\r\nexport const SendButton = styled.button<ButtonProps>`\r\n  width: 7rem;\r\n  outline: none;\r\n  border: none;\r\n  background: ${(props) => (props.isBlank ? COLOR.gray : COLOR.dark)};\r\n  color: ${(props) => (props.isBlank ? COLOR.darkgray : \"black\")};\r\n  font-weight: 800;\r\n  border-radius: 1.5rem;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport * as S from \"./styles\";\r\nimport axios from \"axios\";\r\n\r\ninterface PopUpProps {\r\n  roomcode: string;\r\n  userId: string;\r\n  isMafia: boolean;\r\n  keyword: string;\r\n  isGuessing: boolean;\r\n}\r\n\r\nfunction PopUp({ roomcode, userId, isMafia, keyword, isGuessing }: PopUpProps) {\r\n  const [chatText, setChatText] = useState(\"\");\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setChatText(e.target.value);\r\n  };\r\n  const onSubmit = async () => {\r\n    axios\r\n      .post(\r\n        `https://realdragon.herokuapp.com/description`,\r\n        { roomCode: roomcode, userId: userId, description: chatText },\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      )\r\n      .then(({ data }) => {})\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n  const onGuess = async () => {\r\n    axios\r\n      .post(\r\n        `https://realdragon.herokuapp.com/guess`,\r\n        { roomCode: roomcode, userId: userId, subject: chatText },\r\n        {\r\n          withCredentials: true,\r\n        }\r\n      )\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <S.Layout>\r\n        <S.PopUp>\r\n          {isMafia ? (\r\n            isGuessing ? (\r\n              <S.Text>제시어를 맞혀주세요!</S.Text>\r\n            ) : (\r\n              <S.Text>제시어를 눈치껏 유추해서 설명해주세요.</S.Text>\r\n            )\r\n          ) : (\r\n            <S.Text>\r\n              제시어 <S.KeyWord>{keyword}</S.KeyWord>을(를) 설명해주세요.\r\n            </S.Text>\r\n          )}\r\n          <S.InputContainer>\r\n            <S.ChatInput\r\n              type=\"text\"\r\n              placeholder=\"10자 이내로 입력하세요\"\r\n              maxLength={10}\r\n              onChange={handleChange}\r\n            />\r\n            <S.SendButton\r\n              isBlank={chatText.length == 0}\r\n              onClick={isGuessing ? onGuess : onSubmit}\r\n            >\r\n              확인\r\n            </S.SendButton>\r\n          </S.InputContainer>\r\n        </S.PopUp>\r\n      </S.Layout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PopUp;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as S from \"./styles\";\r\nimport axios from \"axios\";\r\n\r\nimport Player from \"../../components/player\";\r\nimport Chat from \"../../components/chat\";\r\nimport Guide from \"../../components/guide\";\r\nimport PopUp from \"../../components/popup\";\r\n\r\ninterface playersProps {\r\n  nickname: string;\r\n  userId: string;\r\n  state: string;\r\n}\r\n\r\ninterface gamesProps {\r\n  me: { role: string; voted: boolean };\r\n  state: string;\r\n  subject: string;\r\n  round: number;\r\n  currentDescriber: string;\r\n  subjectDescription: { userId: string; description: string }[];\r\n  votes: string;\r\n}\r\n\r\ninterface GameProps {\r\n  user: playersProps;\r\n  roomcode: string;\r\n}\r\n\r\nfunction Game({ user, roomcode }: GameProps) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [isManager, setIsManager] = useState(false);\r\n  const [nowState, setNowState] = useState(\"\");\r\n  const [game, setGame] = useState<gamesProps>();\r\n  const [voteId, setVoteId] = useState(\"\");\r\n  const [users, setUsers] = useState<playersProps[]>();\r\n  const [result, setResult] = useState(\"\");\r\n  const loadGameInfo = async () => {\r\n    axios\r\n      .get(\r\n        `https://realdragon.herokuapp.com/room?roomCode=${roomcode}&userId=${user.userId}`\r\n      )\r\n      .then(({ data }) => {\r\n        setIsManager(data.room.owner == user.userId);\r\n        setNowState(data.room.state);\r\n        setUsers(data.users);\r\n        if (data.game) setGame(data.game);\r\n        if (data.game.lastGameResult)\r\n          setResult(data.game.lastGameResult.winner);\r\n      })\r\n      .then(() => setLoading(true))\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    const interval = setInterval(loadGameInfo, 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <S.Layout>\r\n        <S.Game>\r\n          <S.Roomcode>\r\n            [room] {roomcode}\r\n            <br />\r\n            [round] {game ? game.round : \"게임 시작 전입니다.\"}\r\n          </S.Roomcode>\r\n          <Player\r\n            userId={user.userId}\r\n            roomcode={roomcode}\r\n            isVoting={game?.state === \"VOTING\"}\r\n            descriptions={game?.subjectDescription || []}\r\n            voteId={voteId}\r\n            currentDescriber={game?.currentDescriber || \"\"}\r\n            setVoteId={setVoteId}\r\n          />\r\n          <Guide\r\n            userId={user.userId}\r\n            roomcode={roomcode}\r\n            isManager={isManager}\r\n            now={game?.state || nowState}\r\n            keyword={game?.subject || \"\"}\r\n            isMafia={game?.me.role === \"MAFIA\" || false}\r\n            voteId={game?.me.voted == true ? \"\" : voteId}\r\n            setVoteId={setVoteId}\r\n            users={users || []}\r\n            result={result}\r\n          />\r\n          <Chat />\r\n          {game?.state === \"DESCRIBING\" &&\r\n          game?.currentDescriber == user.userId ? (\r\n            <PopUp\r\n              roomcode={roomcode}\r\n              userId={user.userId}\r\n              isGuessing={false}\r\n              isMafia={game?.me.role === \"MAFIA\" || false}\r\n              keyword={game?.subject || \"\"}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {game?.state === \"GUSSING\" && game?.me.role === \"MAFIA\" ? (\r\n            <PopUp\r\n              roomcode={roomcode}\r\n              userId={user.userId}\r\n              isGuessing={true}\r\n              isMafia={game?.me.role === \"MAFIA\" || false}\r\n              keyword={game?.subject || \"\"}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </S.Game>\r\n      </S.Layout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import styled, { css, keyframes } from \"styled-components/macro\";\r\nimport { COLOR } from \"../../constant\";\r\n\r\nexport const Main = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${COLOR.background};\r\n  overflow-x: hidden;\r\n  padding-top: 7rem;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n  font-size: 5rem;\r\n  font-weight: 800;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nexport const InputContainer = styled.div`\r\n  width: 40rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  background: ${COLOR.light};\r\n  border-radius: 2rem;\r\n  padding: 1rem;\r\n  margin: 1rem;\r\n  :focus-within {\r\n    box-shadow: 0px 0px 5px ${COLOR.darker};\r\n  }\r\n`;\r\n\r\nexport const ChatInput = styled.input`\r\n  width: 100%;\r\n  padding: 1rem;\r\n  outline: none;\r\n  border: none;\r\n  background: none;\r\n  font-size: 2rem;\r\n`;\r\n\r\nexport const Label = styled.div`\r\n  text-align: right;\r\n  width: 10rem;\r\n  font-size: 2rem;\r\n  font-weight: 800;\r\n  padding: 1rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  width: 40rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  margin: 1rem;\r\n`;\r\n\r\nexport const RoomButton = styled.button`\r\n  width: 19rem;\r\n  height: 6rem;\r\n  outline: none;\r\n  border: none;\r\n  background: ${COLOR.dark};\r\n  font-weight: 800;\r\n  border-radius: 2rem;\r\n  font-size: 2rem;\r\n  :hover {\r\n    background: ${COLOR.darker};\r\n  }\r\n`;\r\n\r\nexport const Credit = styled.div`\r\n  text-align: center;\r\n  font-size: 1.8rem;\r\n  font-weight: 700;\r\n  line-height: 150%;\r\n  margin-top: 5rem;\r\n`;\r\n\r\nexport const Comment = styled.div`\r\n  font-size: 2rem;\r\n  font-weight: 800;\r\n`;\r\n\r\n/* */\r\n\r\nconst wave = keyframes`\r\n  0% {\r\n    margin-left: 0;\r\n  }\r\n  100% {\r\n    margin-left: -1773px;\r\n  }\r\n`;\r\n\r\nconst swell = keyframes`\r\n  0%, 100% {\r\n    transform: translate3d(0, 30px,0);\r\n  }\r\n  50% {\r\n    transform: translate3d(0,5px,0);\r\n  }\r\n`;\r\n\r\nexport const WaveContainer = styled.div`\r\n  position: absolute;\r\n  top: -4rem;\r\n  width: 100%;\r\n  height: 5rem;\r\n`;\r\n\r\ninterface WaveProps {\r\n  url: string;\r\n}\r\n\r\nexport const Wave = styled.div<WaveProps>`\r\n  position: absolute;\r\n  left: 0;\r\n  width: 7092px;\r\n  height: 212px;\r\n  transform: translate3d(0, 0, 0);\r\n  background-image: url(${(props) => props.url});\r\n  animation: ${wave} 10s cubic-bezier(0.36, 0.45, 0.63, 0.53) infinite,\r\n    ${swell} 5s ease -1.25s infinite;\r\n  opacity: 0.8;\r\n  transform: translate3d(0, 0, 0);\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as S from \"./styles\";\r\nimport axios from \"axios\";\r\n\r\ninterface playersProps {\r\n  nickname: string;\r\n  userId: string;\r\n  state: string;\r\n}\r\n\r\ninterface MainProps {\r\n  user: playersProps;\r\n  setUser: (user: playersProps) => void;\r\n  roomcode: string;\r\n  setRoomcode: (roomcode: string) => void;\r\n  startGame: () => void;\r\n}\r\n\r\nfunction Main({ user, setUser, roomcode, setRoomcode, startGame }: MainProps) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [nickname, setNickname] = useState(\"\");\r\n  const handleNicknameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNickname(e.target.value);\r\n  };\r\n  const handleRoomcodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRoomcode(e.target.value);\r\n  };\r\n\r\n  const makeRoom = async () => {\r\n    axios\r\n      .post(\r\n        \"https://realdragon.herokuapp.com/room\",\r\n        { nickname: nickname },\r\n        { withCredentials: true }\r\n      )\r\n      .then(({ data }) => {\r\n        setRoomcode(data.roomCode);\r\n        setUser({ nickname: nickname, userId: data.userId, state: \"ALIVE\" });\r\n        setLoading(true);\r\n      })\r\n      .then(() => {\r\n        startGame();\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const enterRoom = async () => {\r\n    axios\r\n      .post(\r\n        \"https://realdragon.herokuapp.com/room/enter\",\r\n        {\r\n          roomCode: roomcode,\r\n          nickname: nickname,\r\n        },\r\n        { withCredentials: true }\r\n      )\r\n      .then(({ data }) => {\r\n        setLoading(true);\r\n        setUser({\r\n          nickname: nickname,\r\n          userId: data.userId,\r\n          state: \"ALIVE\",\r\n        });\r\n      })\r\n      .then(() => {\r\n        startGame();\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        setLoading(false);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <S.Main>\r\n        <S.WaveContainer>\r\n          <S.Wave url={`${process.env.PUBLIC_URL}/assets/wave.png`} />\r\n        </S.WaveContainer>\r\n        <S.Comment>\r\n          <span style={{ color: \"#900\" }}>박</span>력있는{\" \"}\r\n          <span style={{ color: \"#900\" }}>진</span>짜 어른\r\n          <span style={{ color: \"#900\" }}>용</span> 게임\r\n        </S.Comment>\r\n        <S.Title>\r\n          마피아🐉\r\n          <span style={{ color: \"#900\" }}>박진용</span>\r\n        </S.Title>\r\n        <S.InputContainer>\r\n          <S.Label>닉네임</S.Label>\r\n          <S.ChatInput\r\n            type=\"text\"\r\n            placeholder=\"10자 이내로 입력하세요\"\r\n            maxLength={10}\r\n            onChange={handleNicknameChange}\r\n          />\r\n        </S.InputContainer>\r\n        <S.InputContainer>\r\n          <S.Label>방 코드</S.Label>\r\n          <S.ChatInput\r\n            type=\"text\"\r\n            placeholder=\"방 코드를 입력하세요\"\r\n            maxLength={10}\r\n            onChange={handleRoomcodeChange}\r\n          />\r\n        </S.InputContainer>\r\n        <S.ButtonContainer>\r\n          <S.RoomButton onClick={makeRoom}>방 생성하기</S.RoomButton>\r\n          <S.RoomButton onClick={enterRoom}>방 입장하기</S.RoomButton>\r\n        </S.ButtonContainer>\r\n        <S.Credit>\r\n          ⓒ 2020. 팀 박진용 all rights reserved.\r\n          <br />\r\n          <span style={{ fontSize: \"1.4rem\", fontWeight: 500 }}>\r\n            14 김수홍, 17 최하민, 19 김현채\r\n          </span>\r\n        </S.Credit>\r\n      </S.Main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState } from \"react\";\r\nimport Game from \"./view/game\";\r\nimport Main from \"./view/main\";\r\n\r\nexport interface playersProps {\r\n  nickname: string;\r\n  userId: string;\r\n  state: string;\r\n}\r\n\r\nfunction App() {\r\n  const [page, setPage] = useState(\"main\");\r\n  const [user, setUser] = useState<playersProps>({\r\n    nickname: \"\",\r\n    userId: \"\",\r\n    state: \"\",\r\n  });\r\n  const [roomcode, setRoomcode] = useState(\"\");\r\n  return (\r\n    <>\r\n      {page == \"main\" ? (\r\n        <Main\r\n          user={user}\r\n          setUser={setUser}\r\n          roomcode={roomcode}\r\n          setRoomcode={setRoomcode}\r\n          startGame={() => setPage(\"play\")}\r\n        />\r\n      ) : (\r\n        <Game user={user} roomcode={roomcode} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from \"styled-components/macro\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'NanumSquare', sans-serif;\r\n    font-display: 'block';\r\n    box-sizing : border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    transition: all 0.2s ease;\r\n  }\r\n  html {\r\n    font-size : 10px;\r\n    overflow-x: hidden;\r\n    width: 100%;\r\n    height: 100vh;\r\n    ::-webkit-scrollbar {\r\n      width: 0px;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n      display: none;\r\n    }\r\n  }\r\n  \r\n  body {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  ul {\r\n    list-style-type: none;\r\n    padding : 0;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport GlobalStyle from \"./components/globalstyle\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}